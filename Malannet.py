import torch
import torch.nn as nn

class MalanNet(nn.Module):
    def __init__(self):
        super(MalanNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)  # Change input channels to 3 for RGB
        self.relu1 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(2, 2)  # Output: 64x64x32
        
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.relu2 = nn.ReLU()
        self.pool2 = nn.MaxPool2d(2, 2)  # Output: 32x32x64
        
        self.conv3 = nn.Conv2d(64, 128, 3, padding=1)
        self.relu3 = nn.ReLU()
        self.pool3 = nn.MaxPool2d(2, 2)  # Output: 16x16x128
        
        self.conv4 = nn.Conv2d(128, 256, 3, padding=1)
        self.relu4 = nn.ReLU()
        self.pool4 = nn.MaxPool2d(2, 2)  # Output: 8x8x256
        
        self.dense1 = nn.Linear(256 * 8 * 8, 512)  # Adjust based on the final pooled size
        self.relu5 = nn.ReLU()
        self.dense2 = nn.Linear(512, 84)
        self.relu6 = nn.ReLU()
        self.dense3 = nn.Linear(84, 1)
        self.sigmoid1 = nn.Sigmoid()

    def forward(self, x):
        x = self.conv1(x)
        x = self.relu1(x)
        x = self.pool1(x)
        
        x = self.conv2(x)
        x = self.relu2(x)
        x = self.pool2(x)
        
        x = self.conv3(x)
        x = self.relu3(x)
        x = self.pool3(x)
        
        x = self.conv4(x)
        x = self.relu4(x)
        x = self.pool4(x)
        
        x = x.view(-1, 256 * 8 * 8)  # Flatten the tensor based on final pooled size
        x = self.dense1(x)
        x = self.relu5(x)
        x = self.dense2(x)
        x = self.relu6(x)
        x = self.dense3(x)
        x = self.sigmoid1(x)
        return x
