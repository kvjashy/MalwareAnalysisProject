import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import DataLoader, Dataset


class MalwareDataset(Dataset):
    
    def __init__(self, X, y):
        self.X = X
        self.y = y

    def __len__(self):
        return len(self.y)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

    @staticmethod
    def splitting_data(data, test_size=0.2, random_state=42):
        X = data.drop(['hash', 'malware'], axis=1)
        y = data['malware']

        # Perform stratified sampling to maintain class distribution
        X_train, X_val, y_train, y_val = train_test_split(
            X, y, test_size=test_size, random_state=random_state, stratify=y
        )

        X_train = X_train.to_numpy().reshape(-1, 3, 128, 128)
        X_val = X_val.to_numpy().reshape(-1, 3, 128, 128)
        y_train = y_train.to_numpy()
        y_val = y_val.to_numpy()
        
        # Convert to PyTorch tensors
        X_train = torch.tensor(X_train, dtype=torch.float32)
        X_val = torch.tensor(X_val, dtype=torch.float32)
        y_train = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
        y_val = torch.tensor(y_val, dtype=torch.float32).view(-1, 1)
        
        return X_train, X_val, y_train, y_val
    